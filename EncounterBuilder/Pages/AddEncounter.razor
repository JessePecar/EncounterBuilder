@page "/AddEncounter"
@page "/AddEncounter/{EncounterId}"

@inject ICharacterRepository _characterData;
@inject NavigationManager navManager;
<AddToEncounterModal ShowDialog="IsAddingCharacters" DialogToggle="(st) => { IsAddingCharacters = st; IsAltRow = false; }" AddNewCharacter="(character) => OnCharacterAdded(character)"></AddToEncounterModal>
<div class="p-3">
    <div class="row list-header ml-2 mr-2 p-2 mb-0">
        <button class="btn btn-dark col-1" value="" @onclick="() => { IsAddingCharacters = !IsAddingCharacters; IsAltRow = false; }"><span class="oi oi-plus"></span>Add</button>
        <div class="col-10"></div>
        <button class="btn btn-success col-1" value="" @onclick="() => OnSubmit()"><span class="oi oi-folder"></span>Save</button>

    </div>
    <div class="row bg-light ml-2 mr-2 p-3">
        <div class="form-group col-2 mr-2">
            <label>Encounter Name</label>
            <div class="row">
                <input class="@(string.IsNullOrWhiteSpace(EncounterName) ? "is-invalid":"") form-control" @bind="EncounterName" placeholder="Enter Name" />
            </div>
        </div>
        <div class=" col-4">
            <div><label>Campaign</label></div>
            <div class="row">
                <select class="form-control mr-2 col-5" @bind="CampaignId">
                    @foreach (Models.Campaign.Campaign camp in campaigns)
                    {
                        <option value="@camp.Id">@camp.Name</option>
                    }
                </select>
                <input class="@(string.IsNullOrWhiteSpace(Campaign.Name) ? "is-invalid":"") @(Campaign.Id < 0 ? "" : "d-none") form-control col-5" @bind="Campaign.Name" />
            </div>
        </div>
    </div>
    <div class="bg-light vh-70 ml-2 mr-2 p-1 pt-0 mt-0">
        <hr class="border-dark" />
        <label class="text-center font-weight-bolder w-100 @(!EncounterCharacters?.Any() ?? true ? "" : "d-none")" style="font-size: large;">No characters have been added to the encounter</label>

        <div class="pre-scrollable h-90 p-4 shadow @(!EncounterCharacters?.Any() ?? true ? "d-none" : "")">
            @foreach (Models.Character.Character character in EncounterCharacters)
            {

                <DeleteCharacter Character="character" IsAltRow="EncounterCharacters.IndexOf(character) % 2 == 1" OnCharacterDelete="(character) => OnCharacterDeleted(character)" HealthChange="(health) => character.MaxHealth = health"></DeleteCharacter>

            }
        </div>
    </div>


</div>


@code {
    [Parameter]
    public List<Models.Character.Character> EncounterCharacters { get; set; } = new List<Models.Character.Character>();

    [Parameter]
    public int? EncounterId { get; set; }

    private List<Models.Campaign.Campaign> campaigns { get; set; } = new List<Models.Campaign.Campaign>();

    private bool IsAltRow { get; set; } = false;
    private bool IsAddingCharacters { get; set; } = false;

    private Models.Campaign.Campaign Campaign { get; set; } = new Models.Campaign.Campaign() { Id = 0 };

    private long CampaignId
    {
        get => Campaign.Id;
        set => Campaign.Id = value;
    }
    private string EncounterName { get; set; }

    protected override async Task OnInitializedAsync()
    {   
        if (EncounterId.HasValue)
        {
            if (EncounterCharacters == null)
            {
                //Get based on Encounter Id
                EncounterCharacters = new List<Models.Character.Character>();
            }
        }
        campaigns = _characterData.GetCampaigns();
        base.OnInitialized();
    }

    private void OnCharacterAdded(Models.Character.Character character)
    {
        IsAltRow = false;
        EncounterCharacters.Add(character);
        StateHasChanged();
    }

    private void OnCharacterDeleted(Models.Character.Character character)
    {
        IsAltRow = false;
        EncounterCharacters.Remove(character);
        StateHasChanged();
    }

    private void OnSubmit()
    {
        try
        {

            Models.Campaign.Encounter encounter = new Models.Campaign.Encounter()
            {
                Campaign = Campaign,
                EncounterCharacters = EncounterCharacters,
                InitialCharacterCount = EncounterCharacters.Count,
                Name = EncounterName
            };

            if (encounter.Campaign.Id > 0)
            {
                encounter.Campaign.Name = _characterData.GetCampaigns().FirstOrDefault(c => c.Id == encounter.Campaign.Id).Name;
            }
            _characterData.AddEncounter(encounter);
            navManager.NavigateTo("");
        }
        catch(Exception ex)
        {
            navManager.NavigateTo("AddEncounter");
        }

    }
}
