@inject ICharacterRepository _characterData
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavManager;

<div class="box-shadow border pb-3 shadow pr-4 bg-lightish" style="max-height: inherit;">
    <div class="row p-3">
        <input type="button" class="btn btn-dark col-1 m-2 @(IsNewCharacter ? "d-none" : "" )" value="@EditButtonText" @onclick="() => ToggleEditable()" />
        <input type="button" class="btn btn-dark col-1 m-2 @(IsNewCharacter ? "" : "d-none" )" value="Submit" @onclick="() => SubmitCharacter()" disabled="@CanSubmit" />
        <input type="button" class="btn btn-light col-1 text-dark m-2 border-dark" value="@(IsSimpleView ? "Expand" : "Collapse")" @onclick="() => ToggleCollapse()" />
        <div class="col-1"><DeleteButton IsNotVisible="IsNewCharacter" OnButtonClick="() => OnCharacterDelete()"></DeleteButton></div>
    </div>
    <div class="row">
        <div class="col-1"></div>
        <ToggledTextField ColumnWidth="4" InputText="@ChangedCharacter.Name" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.Name)" OnTextChanged="(name) => ChangedCharacter.Name = name"></ToggledTextField>
        
        <BasicCharacter CharacterStats="@ChangedCharacter.Stats" IsCharacterLocked="IsCharacterLocked" StatUpdate="OnStatChanged"></BasicCharacter>
        
        <div class="col-1 form-group ">
            <div><label class="text-center">Minimum Level</label></div>
            <NumberInput Value="@ChangedCharacter.Level" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) => ChangedCharacter.Level = val" />
        </div>
    </div>
    <div class="row">
        <div class="col-1"></div>
        <div class="col-4 form-group">
            <div><label class="text-center">@nameof(@ChangedCharacter.Description)</label></div>
            <textarea class="form-control @((string.IsNullOrWhiteSpace(ChangedCharacter.Description) ? "is-invalid" : "is-valid"))" @bind="@ChangedCharacter.Description" placeholder="Enter Description" disabled="@IsCharacterLocked" rows="2" />
        </div>
        <ToggledEditField InputText="ChangedCharacter.MaxHealth" MaxValue="1000" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.MaxHealth)" OnTextChanged="(mh) => ChangedCharacter.MaxHealth = mh"></ToggledEditField>
        <ToggledEditField InputText="ChangedCharacter.ArmorClass" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.ArmorClass)" OnTextChanged="(ac) => ChangedCharacter.ArmorClass = ac"></ToggledEditField>
        <ToggledEditField InputText="ChangedCharacter.Speed" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.Speed)" OnTextChanged="(s) => ChangedCharacter.Speed = s"></ToggledEditField>
        <AlignmentToggle InputAlignment="ChangedCharacter.Alignment" IsEditable="true" IsAlignmentLocked="IsCharacterLocked" Title="Alignment" OnAlignmentChanged="(al) => ChangedCharacter.Alignment = al"></AlignmentToggle>
        <ToggledTextField InputText="@ChangedCharacter.Race" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.Race)" OnTextChanged="(race) => ChangedCharacter.Race = race"></ToggledTextField>
        <ToggledTextField ColumnWidth="2" InputText="@ChangedCharacter.Language" IsEditable="true" IsTextBlockLocked="IsCharacterLocked" Title="@nameof(ChangedCharacter.Language)" OnTextChanged="(lang) => ChangedCharacter.Language = lang"></ToggledTextField>

    </div>
    <hr />
    <div class="@(IsSimpleView ? "d-none" : "")">
        <div class="pl-2">
            @foreach (Models.Character.CharacterActions action in ChangedCharacter.Actions)
            {

                <div class="row">

                    <div class="col-2 form-group">
                        <div><label class="text-center">Attack Name</label></div>
                        <input type="search" placeholder="Enter Name" class="form-control @((string.IsNullOrWhiteSpace(action.CharacterAttack.Name) ? "is-invalid" : "is-valid"))" @bind="@action.CharacterAttack.Name" disabled="@IsCharacterLocked" />
                    </div>
                    <div class="col-1 form-group">
                        <div><label class="text-center">Dice Damage</label></div>
                        <input type="search" placeholder="Ex: 3D6+2" class="form-control @((string.IsNullOrWhiteSpace(action.CharacterAttack.Damage) ? "is-invalid" : "is-valid"))" @bind="@action.CharacterAttack.Damage" disabled="@IsCharacterLocked" />
                    </div>
                    <div class="col-1 form-group">
                        <div><label class="text-center">Damage Type</label></div>
                        @if (action.IsWeaponAttack)
                        {
                            <select class="text-center form-control" @bind="@action.CharacterAttack.DamageType" disabled="@IsCharacterLocked">
                                <option>@DamageType.None.ToString()</option>
                                <option>@DamageType.Piercing.ToString()</option>
                                <option>@DamageType.Ranged.ToString()</option>
                                <option>@DamageType.Slashing.ToString()</option>
                            </select>
                        }
                        else
                        {
                            <select class="text-center form-control" @bind="@action.CharacterAttack.SpellDamageType" disabled="@IsCharacterLocked">
                                <option>@SpellType.None.ToString()</option>
                                <option>@SpellType.Acid.ToString()</option>
                                <option>@SpellType.Cold.ToString()</option>
                                <option>@SpellType.Fire.ToString()</option>
                                <option>@SpellType.Holy.ToString()</option>
                                <option>@SpellType.Light.ToString()</option>
                                <option>@SpellType.Poison.ToString()</option>
                            </select>
                        }
                    </div>
                    <div class="col-1 form-group ">
                        <div><label class="text-center">Range</label></div>
                        <NumberInput Value="@action.CharacterAttack.Range" IsCharacterLocked="@IsCharacterLocked" Max="1000" />
                    </div>
                    @if (!action.IsWeaponAttack)
                    {
                        <div class="col-1 form-group ">
                            <div><label class="text-center">Saving Throw</label></div>
                            <NumberInput Value="@action.CharacterAttack.SavingThrow" IsCharacterLocked="@IsCharacterLocked" Max="40" />
                        </div>
                        <div class="col-1 form-group ">
                            <div><label class="text-center">Throw Type</label></div>
                            <select class="text-center form-control" @bind="@action.CharacterAttack.ThrowType" disabled="@IsCharacterLocked">
                                <option>@SavingThrowTypes.Dexterity.ToString()</option>
                                <option>@SavingThrowTypes.Charisma.ToString()</option>
                                <option>@SavingThrowTypes.Constitution.ToString()</option>
                                <option>@SavingThrowTypes.Intelligence.ToString()</option>
                                <option>@SavingThrowTypes.Strength.ToString()</option>
                                <option>@SavingThrowTypes.Wisdom.ToString()</option>
                            </select>
                        </div>
                    }
                </div>
                <div>
                    <textarea class="form-control @((string.IsNullOrWhiteSpace(action.CharacterAttack.Description) ? "is-invalid" : "is-valid"))" @bind="@action.CharacterAttack.Description" placeholder="Enter Description" disabled="@IsCharacterLocked" rows="2" />
                </div>

            }
            <hr class="@(ChangedCharacter.Actions.Any() ? "": "d-none")" />
        </div>

        <div class="pl-2 @(IsAbilityAdded ? "": "d-none")">
            <div class="row">
                <div class="col-4 form-group">
                    <div><label class="text-center">Ability Name</label></div>
                    <input type="search" class="form-control @((string.IsNullOrWhiteSpace(ChangedCharacter.Ability?.Title) ? "is-invalid" : "is-valid"))" @bind="@ChangedCharacter.Ability.Title" placeholder="Enter Name" disabled="@IsCharacterLocked" />
                </div>
                <div class="col-4 form-group">
                    <div><label class="text-center">Ability Description</label></div>
                    <textarea class="form-control @((string.IsNullOrWhiteSpace(ChangedCharacter.Ability?.Description) ? "is-invalid" : "is-valid"))" @bind="@ChangedCharacter.Ability.Description" placeholder="Enter Description" disabled="@IsCharacterLocked" rows="1" />
                </div>
            </div>
            <hr />
        </div>
        <div class="row mt-2">
            <div class="col-6"></div>
            <div class="col-2">
                <button type="button" class="btn btn-dark col-btn @(IsAbilityAdded ? "d-none": "")" @onclick="() => IsAbilityAdded = !IsAbilityAdded" disabled="@IsCharacterLocked"><span class="oi oi-plus mr-2" aria-hidden="true"></span>Add Ability</button>
            </div>
            <div class="col-2">
                <button type="button" class="btn btn-dark col-btn" @onclick="() => ChangedCharacter.Actions.Add(new Models.Character.CharacterActions() { IsWeaponAttack = true, CharacterAttack = new Models.Weapons.Attack() })" disabled="@IsCharacterLocked"><span class="oi oi-plus mr-2" aria-hidden="true"></span>Add Attack</button>
            </div>
            <div class="col-2">
                <button type="button" class="btn btn-dark col-btn" @onclick="() => ChangedCharacter.Actions.Add(new Models.Character.CharacterActions() { IsWeaponAttack = false, CharacterAttack = new Models.Weapons.Attack() })" disabled="@IsCharacterLocked"><span class="oi oi-plus mr-2" aria-hidden="true"></span>Add Spell</button>
            </div>
        </div>
    </div>
</div>
@code {

        [Parameter]
        public bool IsNewCharacter { get; set; }

        [Parameter]
        public EncounterBuilder.Models.Character.Character CurrentCharacter { get; set; }
    private EncounterBuilder.Models.Character.Character _changedCharacter = new Models.Character.Character();
    private EncounterBuilder.Models.Character.Character ChangedCharacter
    {
        get => _changedCharacter;
        set
        {
            _changedCharacter = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public Action OnCharacterChange { get; set; }

    [Parameter]
    public bool IsNameEditable { get; set; } = true;

    private bool CanSubmit => string.IsNullOrWhiteSpace(ChangedCharacter.Name)
        || string.IsNullOrWhiteSpace(ChangedCharacter.Description)
        || (string.IsNullOrWhiteSpace(ChangedCharacter?.Ability.Description) && IsAbilityAdded)
        || (string.IsNullOrWhiteSpace(ChangedCharacter?.Ability.Title) && IsAbilityAdded)
        || string.IsNullOrWhiteSpace(ChangedCharacter.Description)
        || ChangedCharacter.Actions.Any(Action => string.IsNullOrWhiteSpace(Action.CharacterAttack.Description) || string.IsNullOrWhiteSpace(Action.CharacterAttack.Name));

    private bool IsCharacterLocked { get; set; }
    private string EditButtonText => IsCharacterLocked ? "Edit" : "Confirm";
    private bool IsAbilityAdded { get; set; } = false;
    private bool IsSimpleView { get; set; } = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        IsCharacterLocked = !IsNewCharacter;
        if (CurrentCharacter == null || IsNewCharacter)
        {
            CurrentCharacter = new Models.Character.Character()
            {
                Stats = EncounterBuilder.Models.Character.CharacterStats.Default
            };
        }
        ChangedCharacter = CurrentCharacter;
        IsAbilityAdded = !string.IsNullOrWhiteSpace(ChangedCharacter.Ability?.Title);
        StateHasChanged();
    }


    private void ToggleEditable()
    {
        IsCharacterLocked = !IsCharacterLocked;
        if (IsCharacterLocked)
        {
            SubmitCharacter();
            OnCharacterChange.Invoke();
        }
    }

    private async Task SubmitCharacter()
    {
        try
        {
            if (_characterData.GetAllCharacters().Result?.Any(ch => ch.Name == ChangedCharacter.Name) ?? false)
            {
                bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Item exists, would you like to overwrite?");

                if (confirmed)
                {
                    _characterData.UpdateCurrentCharacter(ChangedCharacter);
                }
                return;
            }

            await _characterData.AddToCharacterList(ChangedCharacter);

            NavManager.NavigateTo("CharacterList");
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void ToggleCollapse()
    {
        IsSimpleView = !IsSimpleView;
    }

    private async Task OnCharacterDelete()
    {
        try
        {
            if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this character?"))
            {
                await _characterData.DeleteCharacter(ChangedCharacter);
            }
            OnCharacterChange.Invoke();
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private void OnStatChanged(KeyValuePair<string, int> statChange)
    {
        CurrentCharacter.Stats.GetType().GetProperty(statChange.Key).SetValue(CurrentCharacter.Stats, statChange.Value);
    }
}
