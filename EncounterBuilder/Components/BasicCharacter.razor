<div class="col-1 form-group">
    <div><label class="text-center">@nameof(CharacterStats.Strength)</label></div>
    <NumberInput Value="@CharacterStats.Strength" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) =>{ CharacterStats.Strength = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Strength), CharacterStats.Strength)); }" />
</div>
<div class="col-1 form-group ">
    <div><label class="text-center">@nameof(CharacterStats.Dexterity)</label></div>
    <NumberInput Value="@CharacterStats.Dexterity" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) => { CharacterStats.Dexterity = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Dexterity), CharacterStats.Dexterity)); }" />
</div>
<div class="col-1 form-group ">
    <div><label class="text-center">@nameof(CharacterStats.Constitution)</label></div>
    <NumberInput Value="@CharacterStats.Constitution" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) =>{ CharacterStats.Constitution = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Constitution), CharacterStats.Constitution)); }" />
</div>
<div class="col-1 form-group ">
    <div><label class="text-center">@nameof(CharacterStats.Intelligence)</label></div>
    <NumberInput Value="@CharacterStats.Intelligence" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) =>{ CharacterStats.Intelligence = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Intelligence), CharacterStats.Intelligence)); }" />
</div>
<div class="col-1 form-group ">
    <div><label class="text-center">@nameof(CharacterStats.Wisdom)</label></div>
    <NumberInput Value="@CharacterStats.Wisdom" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) =>{ CharacterStats.Wisdom = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Wisdom), CharacterStats.Wisdom)); }" />
</div>
<div class="col-1 form-group">
    <div><label class="text-center">@nameof(CharacterStats.Charisma)</label></div>
    <NumberInput Value="@CharacterStats.Charisma" IsCharacterLocked="@IsCharacterLocked" ValueCallback="(val) =>{ CharacterStats.Charisma = val; StatUpdate.InvokeAsync(new KeyValuePair<string, int>(nameof(CharacterStats.Charisma), CharacterStats.Charisma)); }"></NumberInput>
</div>

@code {
    [Parameter]
    public Models.Character.CharacterStats CharacterStats { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, int>> StatUpdate { get; set; }

    [Parameter]
    public bool IsCharacterLocked { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
}
